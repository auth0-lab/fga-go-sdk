/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// Auth0FgaUsersetTreeDifference struct for Auth0FgaUsersetTreeDifference
type Auth0FgaUsersetTreeDifference struct {
	Base     *UsersetTreeNode `json:"base,omitempty"`
	Subtract *UsersetTreeNode `json:"subtract,omitempty"`
}

// NewAuth0FgaUsersetTreeDifference instantiates a new Auth0FgaUsersetTreeDifference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaUsersetTreeDifference() *Auth0FgaUsersetTreeDifference {
	this := Auth0FgaUsersetTreeDifference{}
	return &this
}

// NewAuth0FgaUsersetTreeDifferenceWithDefaults instantiates a new Auth0FgaUsersetTreeDifference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaUsersetTreeDifferenceWithDefaults() *Auth0FgaUsersetTreeDifference {
	this := Auth0FgaUsersetTreeDifference{}
	return &this
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *Auth0FgaUsersetTreeDifference) GetBase() UsersetTreeNode {
	if o == nil || o.Base == nil {
		var ret UsersetTreeNode
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaUsersetTreeDifference) GetBaseOk() (*UsersetTreeNode, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *Auth0FgaUsersetTreeDifference) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given UsersetTreeNode and assigns it to the Base field.
func (o *Auth0FgaUsersetTreeDifference) SetBase(v UsersetTreeNode) {
	o.Base = &v
}

// GetSubtract returns the Subtract field value if set, zero value otherwise.
func (o *Auth0FgaUsersetTreeDifference) GetSubtract() UsersetTreeNode {
	if o == nil || o.Subtract == nil {
		var ret UsersetTreeNode
		return ret
	}
	return *o.Subtract
}

// GetSubtractOk returns a tuple with the Subtract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaUsersetTreeDifference) GetSubtractOk() (*UsersetTreeNode, bool) {
	if o == nil || o.Subtract == nil {
		return nil, false
	}
	return o.Subtract, true
}

// HasSubtract returns a boolean if a field has been set.
func (o *Auth0FgaUsersetTreeDifference) HasSubtract() bool {
	if o != nil && o.Subtract != nil {
		return true
	}

	return false
}

// SetSubtract gets a reference to the given UsersetTreeNode and assigns it to the Subtract field.
func (o *Auth0FgaUsersetTreeDifference) SetSubtract(v UsersetTreeNode) {
	o.Subtract = &v
}

func (o Auth0FgaUsersetTreeDifference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.Subtract != nil {
		toSerialize["subtract"] = o.Subtract
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaUsersetTreeDifference struct {
	value *Auth0FgaUsersetTreeDifference
	isSet bool
}

func (v NullableAuth0FgaUsersetTreeDifference) Get() *Auth0FgaUsersetTreeDifference {
	return v.value
}

func (v *NullableAuth0FgaUsersetTreeDifference) Set(val *Auth0FgaUsersetTreeDifference) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaUsersetTreeDifference) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaUsersetTreeDifference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaUsersetTreeDifference(val *Auth0FgaUsersetTreeDifference) *NullableAuth0FgaUsersetTreeDifference {
	return &NullableAuth0FgaUsersetTreeDifference{value: val, isSet: true}
}

func (v NullableAuth0FgaUsersetTreeDifference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaUsersetTreeDifference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
