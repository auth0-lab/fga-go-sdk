/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// AuthorizationmodelTypeDefinition struct for AuthorizationmodelTypeDefinition
type AuthorizationmodelTypeDefinition struct {
	Type      string                               `json:"type"`
	Relations map[string]AuthorizationmodelUserset `json:"relations"`
}

// NewAuthorizationmodelTypeDefinition instantiates a new AuthorizationmodelTypeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationmodelTypeDefinition(type_ string, relations map[string]AuthorizationmodelUserset) *AuthorizationmodelTypeDefinition {
	this := AuthorizationmodelTypeDefinition{}
	this.Type = type_
	this.Relations = relations
	return &this
}

// NewAuthorizationmodelTypeDefinitionWithDefaults instantiates a new AuthorizationmodelTypeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationmodelTypeDefinitionWithDefaults() *AuthorizationmodelTypeDefinition {
	this := AuthorizationmodelTypeDefinition{}
	return &this
}

// GetType returns the Type field value
func (o *AuthorizationmodelTypeDefinition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelTypeDefinition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthorizationmodelTypeDefinition) SetType(v string) {
	o.Type = v
}

// GetRelations returns the Relations field value
func (o *AuthorizationmodelTypeDefinition) GetRelations() map[string]AuthorizationmodelUserset {
	if o == nil {
		var ret map[string]AuthorizationmodelUserset
		return ret
	}

	return o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelTypeDefinition) GetRelationsOk() (*map[string]AuthorizationmodelUserset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relations, true
}

// SetRelations sets field value
func (o *AuthorizationmodelTypeDefinition) SetRelations(v map[string]AuthorizationmodelUserset) {
	o.Relations = v
}

func (o AuthorizationmodelTypeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["relations"] = o.Relations
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorizationmodelTypeDefinition struct {
	value *AuthorizationmodelTypeDefinition
	isSet bool
}

func (v NullableAuthorizationmodelTypeDefinition) Get() *AuthorizationmodelTypeDefinition {
	return v.value
}

func (v *NullableAuthorizationmodelTypeDefinition) Set(val *AuthorizationmodelTypeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationmodelTypeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationmodelTypeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationmodelTypeDefinition(val *AuthorizationmodelTypeDefinition) *NullableAuthorizationmodelTypeDefinition {
	return &NullableAuthorizationmodelTypeDefinition{value: val, isSet: true}
}

func (v NullableAuthorizationmodelTypeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationmodelTypeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
