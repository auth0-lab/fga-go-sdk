/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
	"time"
)

// Auth0FgaTuple struct for Auth0FgaTuple
type Auth0FgaTuple struct {
	Key       *Auth0FgaTupleKey `json:"key,omitempty"`
	Timestamp *time.Time        `json:"timestamp,omitempty"`
}

// NewAuth0FgaTuple instantiates a new Auth0FgaTuple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaTuple() *Auth0FgaTuple {
	this := Auth0FgaTuple{}
	return &this
}

// NewAuth0FgaTupleWithDefaults instantiates a new Auth0FgaTuple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaTupleWithDefaults() *Auth0FgaTuple {
	this := Auth0FgaTuple{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Auth0FgaTuple) GetKey() Auth0FgaTupleKey {
	if o == nil || o.Key == nil {
		var ret Auth0FgaTupleKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaTuple) GetKeyOk() (*Auth0FgaTupleKey, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Auth0FgaTuple) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given Auth0FgaTupleKey and assigns it to the Key field.
func (o *Auth0FgaTuple) SetKey(v Auth0FgaTupleKey) {
	o.Key = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Auth0FgaTuple) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaTuple) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Auth0FgaTuple) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *Auth0FgaTuple) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o Auth0FgaTuple) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaTuple struct {
	value *Auth0FgaTuple
	isSet bool
}

func (v NullableAuth0FgaTuple) Get() *Auth0FgaTuple {
	return v.value
}

func (v *NullableAuth0FgaTuple) Set(val *Auth0FgaTuple) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaTuple) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaTuple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaTuple(val *Auth0FgaTuple) *NullableAuth0FgaTuple {
	return &NullableAuth0FgaTuple{value: val, isSet: true}
}

func (v NullableAuth0FgaTuple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaTuple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
