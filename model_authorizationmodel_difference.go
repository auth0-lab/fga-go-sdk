/**
 * Auth0 Fine Grained Authorization (FGA)/Auth0 FGA SDK for Go
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package auth0fga

import (
	"encoding/json"
)

// AuthorizationmodelDifference struct for AuthorizationmodelDifference
type AuthorizationmodelDifference struct {
	Base     Userset `json:"base"`
	Subtract Userset `json:"subtract"`
}

// NewAuthorizationmodelDifference instantiates a new AuthorizationmodelDifference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationmodelDifference(base Userset, subtract Userset) *AuthorizationmodelDifference {
	this := AuthorizationmodelDifference{}
	this.Base = base
	this.Subtract = subtract
	return &this
}

// NewAuthorizationmodelDifferenceWithDefaults instantiates a new AuthorizationmodelDifference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationmodelDifferenceWithDefaults() *AuthorizationmodelDifference {
	this := AuthorizationmodelDifference{}
	return &this
}

// GetBase returns the Base field value
func (o *AuthorizationmodelDifference) GetBase() Userset {
	if o == nil {
		var ret Userset
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelDifference) GetBaseOk() (*Userset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *AuthorizationmodelDifference) SetBase(v Userset) {
	o.Base = v
}

// GetSubtract returns the Subtract field value
func (o *AuthorizationmodelDifference) GetSubtract() Userset {
	if o == nil {
		var ret Userset
		return ret
	}

	return o.Subtract
}

// GetSubtractOk returns a tuple with the Subtract field value
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelDifference) GetSubtractOk() (*Userset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtract, true
}

// SetSubtract sets field value
func (o *AuthorizationmodelDifference) SetSubtract(v Userset) {
	o.Subtract = v
}

func (o AuthorizationmodelDifference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["base"] = o.Base
	}
	if true {
		toSerialize["subtract"] = o.Subtract
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorizationmodelDifference struct {
	value *AuthorizationmodelDifference
	isSet bool
}

func (v NullableAuthorizationmodelDifference) Get() *AuthorizationmodelDifference {
	return v.value
}

func (v *NullableAuthorizationmodelDifference) Set(val *AuthorizationmodelDifference) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationmodelDifference) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationmodelDifference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationmodelDifference(val *AuthorizationmodelDifference) *NullableAuthorizationmodelDifference {
	return &NullableAuthorizationmodelDifference{value: val, isSet: true}
}

func (v NullableAuthorizationmodelDifference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationmodelDifference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
