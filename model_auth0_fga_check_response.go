/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// Auth0FgaCheckResponse struct for Auth0FgaCheckResponse
type Auth0FgaCheckResponse struct {
	Allowed    *bool   `json:"allowed,omitempty"`
	Resolution *string `json:"resolution,omitempty"`
}

// NewAuth0FgaCheckResponse instantiates a new Auth0FgaCheckResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaCheckResponse() *Auth0FgaCheckResponse {
	this := Auth0FgaCheckResponse{}
	return &this
}

// NewAuth0FgaCheckResponseWithDefaults instantiates a new Auth0FgaCheckResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaCheckResponseWithDefaults() *Auth0FgaCheckResponse {
	this := Auth0FgaCheckResponse{}
	return &this
}

// GetAllowed returns the Allowed field value if set, zero value otherwise.
func (o *Auth0FgaCheckResponse) GetAllowed() bool {
	if o == nil || o.Allowed == nil {
		var ret bool
		return ret
	}
	return *o.Allowed
}

// GetAllowedOk returns a tuple with the Allowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaCheckResponse) GetAllowedOk() (*bool, bool) {
	if o == nil || o.Allowed == nil {
		return nil, false
	}
	return o.Allowed, true
}

// HasAllowed returns a boolean if a field has been set.
func (o *Auth0FgaCheckResponse) HasAllowed() bool {
	if o != nil && o.Allowed != nil {
		return true
	}

	return false
}

// SetAllowed gets a reference to the given bool and assigns it to the Allowed field.
func (o *Auth0FgaCheckResponse) SetAllowed(v bool) {
	o.Allowed = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *Auth0FgaCheckResponse) GetResolution() string {
	if o == nil || o.Resolution == nil {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaCheckResponse) GetResolutionOk() (*string, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *Auth0FgaCheckResponse) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *Auth0FgaCheckResponse) SetResolution(v string) {
	o.Resolution = &v
}

func (o Auth0FgaCheckResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Allowed != nil {
		toSerialize["allowed"] = o.Allowed
	}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaCheckResponse struct {
	value *Auth0FgaCheckResponse
	isSet bool
}

func (v NullableAuth0FgaCheckResponse) Get() *Auth0FgaCheckResponse {
	return v.value
}

func (v *NullableAuth0FgaCheckResponse) Set(val *Auth0FgaCheckResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaCheckResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaCheckResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaCheckResponse(val *Auth0FgaCheckResponse) *NullableAuth0FgaCheckResponse {
	return &NullableAuth0FgaCheckResponse{value: val, isSet: true}
}

func (v NullableAuth0FgaCheckResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaCheckResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
