/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// UsersetTreeComputed struct for UsersetTreeComputed
type UsersetTreeComputed struct {
	Userset *string `json:"userset,omitempty"`
}

// NewUsersetTreeComputed instantiates a new UsersetTreeComputed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersetTreeComputed() *UsersetTreeComputed {
	this := UsersetTreeComputed{}
	return &this
}

// NewUsersetTreeComputedWithDefaults instantiates a new UsersetTreeComputed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersetTreeComputedWithDefaults() *UsersetTreeComputed {
	this := UsersetTreeComputed{}
	return &this
}

// GetUserset returns the Userset field value if set, zero value otherwise.
func (o *UsersetTreeComputed) GetUserset() string {
	if o == nil || o.Userset == nil {
		var ret string
		return ret
	}
	return *o.Userset
}

// GetUsersetOk returns a tuple with the Userset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeComputed) GetUsersetOk() (*string, bool) {
	if o == nil || o.Userset == nil {
		return nil, false
	}
	return o.Userset, true
}

// HasUserset returns a boolean if a field has been set.
func (o *UsersetTreeComputed) HasUserset() bool {
	if o != nil && o.Userset != nil {
		return true
	}

	return false
}

// SetUserset gets a reference to the given string and assigns it to the Userset field.
func (o *UsersetTreeComputed) SetUserset(v string) {
	o.Userset = &v
}

func (o UsersetTreeComputed) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Userset != nil {
		toSerialize["userset"] = o.Userset
	}
	return json.Marshal(toSerialize)
}

type NullableUsersetTreeComputed struct {
	value *UsersetTreeComputed
	isSet bool
}

func (v NullableUsersetTreeComputed) Get() *UsersetTreeComputed {
	return v.value
}

func (v *NullableUsersetTreeComputed) Set(val *UsersetTreeComputed) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersetTreeComputed) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersetTreeComputed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersetTreeComputed(val *UsersetTreeComputed) *NullableUsersetTreeComputed {
	return &NullableUsersetTreeComputed{value: val, isSet: true}
}

func (v NullableUsersetTreeComputed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersetTreeComputed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
