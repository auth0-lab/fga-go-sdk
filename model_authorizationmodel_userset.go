/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// AuthorizationmodelUserset struct for AuthorizationmodelUserset
type AuthorizationmodelUserset struct {
	// A DirectUserset is a sentinel message for referencing the direct members specified by an object/relation mapping.
	This            *map[string]interface{}           `json:"this,omitempty"`
	ComputedUserset *AuthorizationmodelObjectRelation `json:"computedUserset,omitempty"`
	TupleToUserset  *AuthorizationmodelTupleToUserset `json:"tupleToUserset,omitempty"`
	Union           *AuthorizationmodelUsersets       `json:"union,omitempty"`
	Intersection    *AuthorizationmodelUsersets       `json:"intersection,omitempty"`
	Difference      *AuthorizationmodelDifference     `json:"difference,omitempty"`
}

// NewAuthorizationmodelUserset instantiates a new AuthorizationmodelUserset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationmodelUserset() *AuthorizationmodelUserset {
	this := AuthorizationmodelUserset{}
	return &this
}

// NewAuthorizationmodelUsersetWithDefaults instantiates a new AuthorizationmodelUserset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationmodelUsersetWithDefaults() *AuthorizationmodelUserset {
	this := AuthorizationmodelUserset{}
	return &this
}

// GetThis returns the This field value if set, zero value otherwise.
func (o *AuthorizationmodelUserset) GetThis() map[string]interface{} {
	if o == nil || o.This == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.This
}

// GetThisOk returns a tuple with the This field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelUserset) GetThisOk() (*map[string]interface{}, bool) {
	if o == nil || o.This == nil {
		return nil, false
	}
	return o.This, true
}

// HasThis returns a boolean if a field has been set.
func (o *AuthorizationmodelUserset) HasThis() bool {
	if o != nil && o.This != nil {
		return true
	}

	return false
}

// SetThis gets a reference to the given map[string]interface{} and assigns it to the This field.
func (o *AuthorizationmodelUserset) SetThis(v map[string]interface{}) {
	o.This = &v
}

// GetComputedUserset returns the ComputedUserset field value if set, zero value otherwise.
func (o *AuthorizationmodelUserset) GetComputedUserset() AuthorizationmodelObjectRelation {
	if o == nil || o.ComputedUserset == nil {
		var ret AuthorizationmodelObjectRelation
		return ret
	}
	return *o.ComputedUserset
}

// GetComputedUsersetOk returns a tuple with the ComputedUserset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelUserset) GetComputedUsersetOk() (*AuthorizationmodelObjectRelation, bool) {
	if o == nil || o.ComputedUserset == nil {
		return nil, false
	}
	return o.ComputedUserset, true
}

// HasComputedUserset returns a boolean if a field has been set.
func (o *AuthorizationmodelUserset) HasComputedUserset() bool {
	if o != nil && o.ComputedUserset != nil {
		return true
	}

	return false
}

// SetComputedUserset gets a reference to the given AuthorizationmodelObjectRelation and assigns it to the ComputedUserset field.
func (o *AuthorizationmodelUserset) SetComputedUserset(v AuthorizationmodelObjectRelation) {
	o.ComputedUserset = &v
}

// GetTupleToUserset returns the TupleToUserset field value if set, zero value otherwise.
func (o *AuthorizationmodelUserset) GetTupleToUserset() AuthorizationmodelTupleToUserset {
	if o == nil || o.TupleToUserset == nil {
		var ret AuthorizationmodelTupleToUserset
		return ret
	}
	return *o.TupleToUserset
}

// GetTupleToUsersetOk returns a tuple with the TupleToUserset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelUserset) GetTupleToUsersetOk() (*AuthorizationmodelTupleToUserset, bool) {
	if o == nil || o.TupleToUserset == nil {
		return nil, false
	}
	return o.TupleToUserset, true
}

// HasTupleToUserset returns a boolean if a field has been set.
func (o *AuthorizationmodelUserset) HasTupleToUserset() bool {
	if o != nil && o.TupleToUserset != nil {
		return true
	}

	return false
}

// SetTupleToUserset gets a reference to the given AuthorizationmodelTupleToUserset and assigns it to the TupleToUserset field.
func (o *AuthorizationmodelUserset) SetTupleToUserset(v AuthorizationmodelTupleToUserset) {
	o.TupleToUserset = &v
}

// GetUnion returns the Union field value if set, zero value otherwise.
func (o *AuthorizationmodelUserset) GetUnion() AuthorizationmodelUsersets {
	if o == nil || o.Union == nil {
		var ret AuthorizationmodelUsersets
		return ret
	}
	return *o.Union
}

// GetUnionOk returns a tuple with the Union field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelUserset) GetUnionOk() (*AuthorizationmodelUsersets, bool) {
	if o == nil || o.Union == nil {
		return nil, false
	}
	return o.Union, true
}

// HasUnion returns a boolean if a field has been set.
func (o *AuthorizationmodelUserset) HasUnion() bool {
	if o != nil && o.Union != nil {
		return true
	}

	return false
}

// SetUnion gets a reference to the given AuthorizationmodelUsersets and assigns it to the Union field.
func (o *AuthorizationmodelUserset) SetUnion(v AuthorizationmodelUsersets) {
	o.Union = &v
}

// GetIntersection returns the Intersection field value if set, zero value otherwise.
func (o *AuthorizationmodelUserset) GetIntersection() AuthorizationmodelUsersets {
	if o == nil || o.Intersection == nil {
		var ret AuthorizationmodelUsersets
		return ret
	}
	return *o.Intersection
}

// GetIntersectionOk returns a tuple with the Intersection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelUserset) GetIntersectionOk() (*AuthorizationmodelUsersets, bool) {
	if o == nil || o.Intersection == nil {
		return nil, false
	}
	return o.Intersection, true
}

// HasIntersection returns a boolean if a field has been set.
func (o *AuthorizationmodelUserset) HasIntersection() bool {
	if o != nil && o.Intersection != nil {
		return true
	}

	return false
}

// SetIntersection gets a reference to the given AuthorizationmodelUsersets and assigns it to the Intersection field.
func (o *AuthorizationmodelUserset) SetIntersection(v AuthorizationmodelUsersets) {
	o.Intersection = &v
}

// GetDifference returns the Difference field value if set, zero value otherwise.
func (o *AuthorizationmodelUserset) GetDifference() AuthorizationmodelDifference {
	if o == nil || o.Difference == nil {
		var ret AuthorizationmodelDifference
		return ret
	}
	return *o.Difference
}

// GetDifferenceOk returns a tuple with the Difference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelUserset) GetDifferenceOk() (*AuthorizationmodelDifference, bool) {
	if o == nil || o.Difference == nil {
		return nil, false
	}
	return o.Difference, true
}

// HasDifference returns a boolean if a field has been set.
func (o *AuthorizationmodelUserset) HasDifference() bool {
	if o != nil && o.Difference != nil {
		return true
	}

	return false
}

// SetDifference gets a reference to the given AuthorizationmodelDifference and assigns it to the Difference field.
func (o *AuthorizationmodelUserset) SetDifference(v AuthorizationmodelDifference) {
	o.Difference = &v
}

func (o AuthorizationmodelUserset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.This != nil {
		toSerialize["this"] = o.This
	}
	if o.ComputedUserset != nil {
		toSerialize["computedUserset"] = o.ComputedUserset
	}
	if o.TupleToUserset != nil {
		toSerialize["tupleToUserset"] = o.TupleToUserset
	}
	if o.Union != nil {
		toSerialize["union"] = o.Union
	}
	if o.Intersection != nil {
		toSerialize["intersection"] = o.Intersection
	}
	if o.Difference != nil {
		toSerialize["difference"] = o.Difference
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorizationmodelUserset struct {
	value *AuthorizationmodelUserset
	isSet bool
}

func (v NullableAuthorizationmodelUserset) Get() *AuthorizationmodelUserset {
	return v.value
}

func (v *NullableAuthorizationmodelUserset) Set(val *AuthorizationmodelUserset) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationmodelUserset) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationmodelUserset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationmodelUserset(val *AuthorizationmodelUserset) *NullableAuthorizationmodelUserset {
	return &NullableAuthorizationmodelUserset{value: val, isSet: true}
}

func (v NullableAuthorizationmodelUserset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationmodelUserset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
