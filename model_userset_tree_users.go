/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// UsersetTreeUsers struct for UsersetTreeUsers
type UsersetTreeUsers struct {
	Users *[]string `json:"users,omitempty"`
}

// NewUsersetTreeUsers instantiates a new UsersetTreeUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersetTreeUsers() *UsersetTreeUsers {
	this := UsersetTreeUsers{}
	return &this
}

// NewUsersetTreeUsersWithDefaults instantiates a new UsersetTreeUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersetTreeUsersWithDefaults() *UsersetTreeUsers {
	this := UsersetTreeUsers{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UsersetTreeUsers) GetUsers() []string {
	if o == nil || o.Users == nil {
		var ret []string
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeUsers) GetUsersOk() (*[]string, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UsersetTreeUsers) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *UsersetTreeUsers) SetUsers(v []string) {
	o.Users = &v
}

func (o UsersetTreeUsers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableUsersetTreeUsers struct {
	value *UsersetTreeUsers
	isSet bool
}

func (v NullableUsersetTreeUsers) Get() *UsersetTreeUsers {
	return v.value
}

func (v *NullableUsersetTreeUsers) Set(val *UsersetTreeUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersetTreeUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersetTreeUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersetTreeUsers(val *UsersetTreeUsers) *NullableUsersetTreeUsers {
	return &NullableUsersetTreeUsers{value: val, isSet: true}
}

func (v NullableUsersetTreeUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersetTreeUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
