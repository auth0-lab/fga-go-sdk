/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// Auth0FgaAssertions struct for Auth0FgaAssertions
type Auth0FgaAssertions struct {
	Assertions *[]Auth0FgaAssertion `json:"assertions,omitempty"`
}

// NewAuth0FgaAssertions instantiates a new Auth0FgaAssertions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaAssertions() *Auth0FgaAssertions {
	this := Auth0FgaAssertions{}
	return &this
}

// NewAuth0FgaAssertionsWithDefaults instantiates a new Auth0FgaAssertions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaAssertionsWithDefaults() *Auth0FgaAssertions {
	this := Auth0FgaAssertions{}
	return &this
}

// GetAssertions returns the Assertions field value if set, zero value otherwise.
func (o *Auth0FgaAssertions) GetAssertions() []Auth0FgaAssertion {
	if o == nil || o.Assertions == nil {
		var ret []Auth0FgaAssertion
		return ret
	}
	return *o.Assertions
}

// GetAssertionsOk returns a tuple with the Assertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaAssertions) GetAssertionsOk() (*[]Auth0FgaAssertion, bool) {
	if o == nil || o.Assertions == nil {
		return nil, false
	}
	return o.Assertions, true
}

// HasAssertions returns a boolean if a field has been set.
func (o *Auth0FgaAssertions) HasAssertions() bool {
	if o != nil && o.Assertions != nil {
		return true
	}

	return false
}

// SetAssertions gets a reference to the given []Auth0FgaAssertion and assigns it to the Assertions field.
func (o *Auth0FgaAssertions) SetAssertions(v []Auth0FgaAssertion) {
	o.Assertions = &v
}

func (o Auth0FgaAssertions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assertions != nil {
		toSerialize["assertions"] = o.Assertions
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaAssertions struct {
	value *Auth0FgaAssertions
	isSet bool
}

func (v NullableAuth0FgaAssertions) Get() *Auth0FgaAssertions {
	return v.value
}

func (v *NullableAuth0FgaAssertions) Set(val *Auth0FgaAssertions) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaAssertions) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaAssertions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaAssertions(val *Auth0FgaAssertions) *NullableAuth0FgaAssertions {
	return &NullableAuth0FgaAssertions{value: val, isSet: true}
}

func (v NullableAuth0FgaAssertions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaAssertions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
