/**
 * Go SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package auth0fga

import (
	"encoding/json"
)

// WriteSettingsResponse struct for WriteSettingsResponse
type WriteSettingsResponse struct {
	Environment  *Environment   `json:"environment,omitempty"`
	TokenIssuers *[]TokenIssuer `json:"token_issuers,omitempty"`
}

// NewWriteSettingsResponse instantiates a new WriteSettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWriteSettingsResponse() *WriteSettingsResponse {
	this := WriteSettingsResponse{}
	var environment Environment = ENVIRONMENT_UNSPECIFIED
	this.Environment = &environment
	return &this
}

// NewWriteSettingsResponseWithDefaults instantiates a new WriteSettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWriteSettingsResponseWithDefaults() *WriteSettingsResponse {
	this := WriteSettingsResponse{}
	var environment Environment = ENVIRONMENT_UNSPECIFIED
	this.Environment = &environment
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *WriteSettingsResponse) GetEnvironment() Environment {
	if o == nil || o.Environment == nil {
		var ret Environment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteSettingsResponse) GetEnvironmentOk() (*Environment, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *WriteSettingsResponse) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given Environment and assigns it to the Environment field.
func (o *WriteSettingsResponse) SetEnvironment(v Environment) {
	o.Environment = &v
}

// GetTokenIssuers returns the TokenIssuers field value if set, zero value otherwise.
func (o *WriteSettingsResponse) GetTokenIssuers() []TokenIssuer {
	if o == nil || o.TokenIssuers == nil {
		var ret []TokenIssuer
		return ret
	}
	return *o.TokenIssuers
}

// GetTokenIssuersOk returns a tuple with the TokenIssuers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteSettingsResponse) GetTokenIssuersOk() (*[]TokenIssuer, bool) {
	if o == nil || o.TokenIssuers == nil {
		return nil, false
	}
	return o.TokenIssuers, true
}

// HasTokenIssuers returns a boolean if a field has been set.
func (o *WriteSettingsResponse) HasTokenIssuers() bool {
	if o != nil && o.TokenIssuers != nil {
		return true
	}

	return false
}

// SetTokenIssuers gets a reference to the given []TokenIssuer and assigns it to the TokenIssuers field.
func (o *WriteSettingsResponse) SetTokenIssuers(v []TokenIssuer) {
	o.TokenIssuers = &v
}

func (o WriteSettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.TokenIssuers != nil {
		toSerialize["token_issuers"] = o.TokenIssuers
	}
	return json.Marshal(toSerialize)
}

type NullableWriteSettingsResponse struct {
	value *WriteSettingsResponse
	isSet bool
}

func (v NullableWriteSettingsResponse) Get() *WriteSettingsResponse {
	return v.value
}

func (v *NullableWriteSettingsResponse) Set(val *WriteSettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteSettingsResponse(val *WriteSettingsResponse) *NullableWriteSettingsResponse {
	return &NullableWriteSettingsResponse{value: val, isSet: true}
}

func (v NullableWriteSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
