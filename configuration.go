/**
 * Go SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package auth0fga

import (
	"encoding/json"
	"net/http"
	"strings"
)

// Configuration stores the configuration of the API client
type Configuration struct {
	Host           string            `json:"host,omitempty"`
	Scheme         string            `json:"scheme,omitempty"`
	DefaultHeaders map[string]string `json:"defaultHeader,omitempty"`
	UserAgent      string            `json:"userAgent,omitempty"`
	Debug          bool              `json:"debug,omitempty"`
	StoreId        string            `json:"storeId,omitempty"`
	ClientId       string            `json:"clientId,omitempty"`
	ClientSecret   string            `json:"clientSecret,omitempty"`
	ApiTokenIssuer string            `json:"apiTokenIssuer,omitempty"`
	ApiAudience    string            `json:"apiAudience,omitempty"`
	HTTPClient     *http.Client
}

// UserConfiguration stores the configuration provided by the user
type UserConfiguration struct {
	StoreId      string `json:"storeId,omitempty"`
	ClientId     string `json:"clientId,omitempty"`
	ClientSecret string `json:"clientSecret,omitempty"`
	Environment  string `json:"environment,omitempty"`
}

// EnvironmentConfiguration stores the environment settings
type EnvironmentConfiguration struct {
	Host           string `json:"host,omitempty"`
	Scheme         string `json:"scheme,omitempty"`
	ApiTokenIssuer string `json:"apiTokenIssuer,omitempty"`
	ApiAudience    string `json:"apiAudience,omitempty"`
	AllowNoAuth    bool   `json:"allowNoAuth,omitempty"`
}

var environmentConfigurationString = `{"default":{"apiAudience":"https://api.us1.fga.dev/","apiTokenIssuer":"fga.us.auth0.com","scheme":"https","host":"api.us1.fga.dev"},"us":{"apiAudience":"https://api.us1.fga.dev/","apiTokenIssuer":"fga.us.auth0.com","scheme":"https","host":"api.us1.fga.dev"},"playground":{"allowNoAuth":true,"apiAudience":"https://api.playground.fga.dev/","apiTokenIssuer":"sandcastle-dev.us.auth0.com","scheme":"https","host":"api.playground.fga.dev"},"staging":{"apiAudience":"https://api.staging.fga.dev/","apiTokenIssuer":"sandcastle-dev.us.auth0.com","scheme":"https","host":"api.staging.fga.dev"},"poc":{"apiAudience":"https://api.poc.sandcastle.cloud","apiTokenIssuer":"sandcastle-dev.us.auth0.com","scheme":"https","host":"api.poc.sandcastle.cloud"}}`

func getEnvironmentConfiguration(environment string) (*EnvironmentConfiguration, error) {
	var environmentConfigs map[string]EnvironmentConfiguration
	if err := json.Unmarshal([]byte(environmentConfigurationString), &environmentConfigs); err != nil {
		return nil, err
	}

	if environment == "" {
		environment = "default"
	}
	environmentConfig, found := environmentConfigs[environment]

	if !found {
		allowedEnvs := []string{}
		for env := range environmentConfigs {
			allowedEnvs = append(allowedEnvs, env)
		}
		return nil, reportError("UserConfiguration.Environment is required and must be one of the following: %v", allowedEnvs)
	}

	return &environmentConfig, nil
}

// NewConfiguration returns a new Configuration object
func NewConfiguration(userConfig UserConfiguration) (*Configuration, error) {
	if userConfig.StoreId == "" {
		return nil, reportError("UserConfiguration.StoreId is required")
	}

	environmentConfig, err := getEnvironmentConfiguration(userConfig.Environment)
	if err != nil {
		return nil, err
	}

	if !environmentConfig.AllowNoAuth && (userConfig.ClientId == "" || userConfig.ClientSecret == "") {
		return nil, reportError("UserConfiguration.ClientId and userConfig.ClientSecret are required")
	}

	cfg := &Configuration{
		Host:           environmentConfig.Host,
		Scheme:         environmentConfig.Scheme,
		DefaultHeaders: make(map[string]string),
		UserAgent:      strings.Replace("auth0-fga-sdk/go/{packageVersion}", "{packageVersion}", "0.0.1", -1),
		Debug:          false,
		StoreId:        userConfig.StoreId,
		ClientId:       userConfig.ClientId,
		ClientSecret:   userConfig.ClientSecret,
		ApiTokenIssuer: environmentConfig.ApiTokenIssuer,
		ApiAudience:    environmentConfig.ApiAudience,
	}

	return cfg, nil
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeaders[key] = value
}
