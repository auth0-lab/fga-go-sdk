/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// AuthorizationmodelObjectRelation struct for AuthorizationmodelObjectRelation
type AuthorizationmodelObjectRelation struct {
	Object   *string `json:"object,omitempty"`
	Relation *string `json:"relation,omitempty"`
}

// NewAuthorizationmodelObjectRelation instantiates a new AuthorizationmodelObjectRelation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationmodelObjectRelation() *AuthorizationmodelObjectRelation {
	this := AuthorizationmodelObjectRelation{}
	return &this
}

// NewAuthorizationmodelObjectRelationWithDefaults instantiates a new AuthorizationmodelObjectRelation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationmodelObjectRelationWithDefaults() *AuthorizationmodelObjectRelation {
	this := AuthorizationmodelObjectRelation{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *AuthorizationmodelObjectRelation) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelObjectRelation) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *AuthorizationmodelObjectRelation) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *AuthorizationmodelObjectRelation) SetObject(v string) {
	o.Object = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *AuthorizationmodelObjectRelation) GetRelation() string {
	if o == nil || o.Relation == nil {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationmodelObjectRelation) GetRelationOk() (*string, bool) {
	if o == nil || o.Relation == nil {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *AuthorizationmodelObjectRelation) HasRelation() bool {
	if o != nil && o.Relation != nil {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *AuthorizationmodelObjectRelation) SetRelation(v string) {
	o.Relation = &v
}

func (o AuthorizationmodelObjectRelation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.Relation != nil {
		toSerialize["relation"] = o.Relation
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorizationmodelObjectRelation struct {
	value *AuthorizationmodelObjectRelation
	isSet bool
}

func (v NullableAuthorizationmodelObjectRelation) Get() *AuthorizationmodelObjectRelation {
	return v.value
}

func (v *NullableAuthorizationmodelObjectRelation) Set(val *AuthorizationmodelObjectRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationmodelObjectRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationmodelObjectRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationmodelObjectRelation(val *AuthorizationmodelObjectRelation) *NullableAuthorizationmodelObjectRelation {
	return &NullableAuthorizationmodelObjectRelation{value: val, isSet: true}
}

func (v NullableAuthorizationmodelObjectRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationmodelObjectRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
