/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// Auth0FgaUsersetTree A UsersetTree contains the result of an Expansion.
type Auth0FgaUsersetTree struct {
	Root *UsersetTreeNode `json:"root,omitempty"`
}

// NewAuth0FgaUsersetTree instantiates a new Auth0FgaUsersetTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaUsersetTree() *Auth0FgaUsersetTree {
	this := Auth0FgaUsersetTree{}
	return &this
}

// NewAuth0FgaUsersetTreeWithDefaults instantiates a new Auth0FgaUsersetTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaUsersetTreeWithDefaults() *Auth0FgaUsersetTree {
	this := Auth0FgaUsersetTree{}
	return &this
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *Auth0FgaUsersetTree) GetRoot() UsersetTreeNode {
	if o == nil || o.Root == nil {
		var ret UsersetTreeNode
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaUsersetTree) GetRootOk() (*UsersetTreeNode, bool) {
	if o == nil || o.Root == nil {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *Auth0FgaUsersetTree) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given UsersetTreeNode and assigns it to the Root field.
func (o *Auth0FgaUsersetTree) SetRoot(v UsersetTreeNode) {
	o.Root = &v
}

func (o Auth0FgaUsersetTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Root != nil {
		toSerialize["root"] = o.Root
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaUsersetTree struct {
	value *Auth0FgaUsersetTree
	isSet bool
}

func (v NullableAuth0FgaUsersetTree) Get() *Auth0FgaUsersetTree {
	return v.value
}

func (v *NullableAuth0FgaUsersetTree) Set(val *Auth0FgaUsersetTree) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaUsersetTree) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaUsersetTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaUsersetTree(val *Auth0FgaUsersetTree) *NullableAuth0FgaUsersetTree {
	return &NullableAuth0FgaUsersetTree{value: val, isSet: true}
}

func (v NullableAuth0FgaUsersetTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaUsersetTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
