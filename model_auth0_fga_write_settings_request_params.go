/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// Auth0FgaWriteSettingsRequestParams struct for Auth0FgaWriteSettingsRequestParams
type Auth0FgaWriteSettingsRequestParams struct {
	Environment *SettingsEnvironment `json:"environment,omitempty"`
}

// NewAuth0FgaWriteSettingsRequestParams instantiates a new Auth0FgaWriteSettingsRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaWriteSettingsRequestParams() *Auth0FgaWriteSettingsRequestParams {
	this := Auth0FgaWriteSettingsRequestParams{}
	var environment SettingsEnvironment = ENVIRONMENT_UNSPECIFIED
	this.Environment = &environment
	return &this
}

// NewAuth0FgaWriteSettingsRequestParamsWithDefaults instantiates a new Auth0FgaWriteSettingsRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaWriteSettingsRequestParamsWithDefaults() *Auth0FgaWriteSettingsRequestParams {
	this := Auth0FgaWriteSettingsRequestParams{}
	var environment SettingsEnvironment = ENVIRONMENT_UNSPECIFIED
	this.Environment = &environment
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *Auth0FgaWriteSettingsRequestParams) GetEnvironment() SettingsEnvironment {
	if o == nil || o.Environment == nil {
		var ret SettingsEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaWriteSettingsRequestParams) GetEnvironmentOk() (*SettingsEnvironment, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *Auth0FgaWriteSettingsRequestParams) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given SettingsEnvironment and assigns it to the Environment field.
func (o *Auth0FgaWriteSettingsRequestParams) SetEnvironment(v SettingsEnvironment) {
	o.Environment = &v
}

func (o Auth0FgaWriteSettingsRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaWriteSettingsRequestParams struct {
	value *Auth0FgaWriteSettingsRequestParams
	isSet bool
}

func (v NullableAuth0FgaWriteSettingsRequestParams) Get() *Auth0FgaWriteSettingsRequestParams {
	return v.value
}

func (v *NullableAuth0FgaWriteSettingsRequestParams) Set(val *Auth0FgaWriteSettingsRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaWriteSettingsRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaWriteSettingsRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaWriteSettingsRequestParams(val *Auth0FgaWriteSettingsRequestParams) *NullableAuth0FgaWriteSettingsRequestParams {
	return &NullableAuth0FgaWriteSettingsRequestParams{value: val, isSet: true}
}

func (v NullableAuth0FgaWriteSettingsRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaWriteSettingsRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
