/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// UsersetTreeNode struct for UsersetTreeNode
type UsersetTreeNode struct {
	Name         *string                        `json:"name,omitempty"`
	Leaf         *UsersetTreeLeaf               `json:"leaf,omitempty"`
	Difference   *Auth0FgaUsersetTreeDifference `json:"difference,omitempty"`
	Union        *UsersetTreeNodes              `json:"union,omitempty"`
	Intersection *UsersetTreeNodes              `json:"intersection,omitempty"`
}

// NewUsersetTreeNode instantiates a new UsersetTreeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersetTreeNode() *UsersetTreeNode {
	this := UsersetTreeNode{}
	return &this
}

// NewUsersetTreeNodeWithDefaults instantiates a new UsersetTreeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersetTreeNodeWithDefaults() *UsersetTreeNode {
	this := UsersetTreeNode{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UsersetTreeNode) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeNode) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UsersetTreeNode) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UsersetTreeNode) SetName(v string) {
	o.Name = &v
}

// GetLeaf returns the Leaf field value if set, zero value otherwise.
func (o *UsersetTreeNode) GetLeaf() UsersetTreeLeaf {
	if o == nil || o.Leaf == nil {
		var ret UsersetTreeLeaf
		return ret
	}
	return *o.Leaf
}

// GetLeafOk returns a tuple with the Leaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeNode) GetLeafOk() (*UsersetTreeLeaf, bool) {
	if o == nil || o.Leaf == nil {
		return nil, false
	}
	return o.Leaf, true
}

// HasLeaf returns a boolean if a field has been set.
func (o *UsersetTreeNode) HasLeaf() bool {
	if o != nil && o.Leaf != nil {
		return true
	}

	return false
}

// SetLeaf gets a reference to the given UsersetTreeLeaf and assigns it to the Leaf field.
func (o *UsersetTreeNode) SetLeaf(v UsersetTreeLeaf) {
	o.Leaf = &v
}

// GetDifference returns the Difference field value if set, zero value otherwise.
func (o *UsersetTreeNode) GetDifference() Auth0FgaUsersetTreeDifference {
	if o == nil || o.Difference == nil {
		var ret Auth0FgaUsersetTreeDifference
		return ret
	}
	return *o.Difference
}

// GetDifferenceOk returns a tuple with the Difference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeNode) GetDifferenceOk() (*Auth0FgaUsersetTreeDifference, bool) {
	if o == nil || o.Difference == nil {
		return nil, false
	}
	return o.Difference, true
}

// HasDifference returns a boolean if a field has been set.
func (o *UsersetTreeNode) HasDifference() bool {
	if o != nil && o.Difference != nil {
		return true
	}

	return false
}

// SetDifference gets a reference to the given Auth0FgaUsersetTreeDifference and assigns it to the Difference field.
func (o *UsersetTreeNode) SetDifference(v Auth0FgaUsersetTreeDifference) {
	o.Difference = &v
}

// GetUnion returns the Union field value if set, zero value otherwise.
func (o *UsersetTreeNode) GetUnion() UsersetTreeNodes {
	if o == nil || o.Union == nil {
		var ret UsersetTreeNodes
		return ret
	}
	return *o.Union
}

// GetUnionOk returns a tuple with the Union field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeNode) GetUnionOk() (*UsersetTreeNodes, bool) {
	if o == nil || o.Union == nil {
		return nil, false
	}
	return o.Union, true
}

// HasUnion returns a boolean if a field has been set.
func (o *UsersetTreeNode) HasUnion() bool {
	if o != nil && o.Union != nil {
		return true
	}

	return false
}

// SetUnion gets a reference to the given UsersetTreeNodes and assigns it to the Union field.
func (o *UsersetTreeNode) SetUnion(v UsersetTreeNodes) {
	o.Union = &v
}

// GetIntersection returns the Intersection field value if set, zero value otherwise.
func (o *UsersetTreeNode) GetIntersection() UsersetTreeNodes {
	if o == nil || o.Intersection == nil {
		var ret UsersetTreeNodes
		return ret
	}
	return *o.Intersection
}

// GetIntersectionOk returns a tuple with the Intersection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeNode) GetIntersectionOk() (*UsersetTreeNodes, bool) {
	if o == nil || o.Intersection == nil {
		return nil, false
	}
	return o.Intersection, true
}

// HasIntersection returns a boolean if a field has been set.
func (o *UsersetTreeNode) HasIntersection() bool {
	if o != nil && o.Intersection != nil {
		return true
	}

	return false
}

// SetIntersection gets a reference to the given UsersetTreeNodes and assigns it to the Intersection field.
func (o *UsersetTreeNode) SetIntersection(v UsersetTreeNodes) {
	o.Intersection = &v
}

func (o UsersetTreeNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Leaf != nil {
		toSerialize["leaf"] = o.Leaf
	}
	if o.Difference != nil {
		toSerialize["difference"] = o.Difference
	}
	if o.Union != nil {
		toSerialize["union"] = o.Union
	}
	if o.Intersection != nil {
		toSerialize["intersection"] = o.Intersection
	}
	return json.Marshal(toSerialize)
}

type NullableUsersetTreeNode struct {
	value *UsersetTreeNode
	isSet bool
}

func (v NullableUsersetTreeNode) Get() *UsersetTreeNode {
	return v.value
}

func (v *NullableUsersetTreeNode) Set(val *UsersetTreeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersetTreeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersetTreeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersetTreeNode(val *UsersetTreeNode) *NullableUsersetTreeNode {
	return &NullableUsersetTreeNode{value: val, isSet: true}
}

func (v NullableUsersetTreeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersetTreeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
