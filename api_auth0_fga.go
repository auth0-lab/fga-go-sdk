/**
 * Go SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package auth0fga

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_math "math"
	_rand "math/rand"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

type Auth0FgaApi interface {

	/*
		 * Check Check whether a user is authorized to access an object
		 * The check API will return whether the user has a certain relationship with an object in a certain store.
	Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required.
	The response will return whether the relationship exists in the field `allowed`.

	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- Each store has a limit of **300** check requests per second (RPS).
	## Example
	In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body
	```json
	{
	  "tuple_key": {
	    "user": "anne@auth0.com",
	    "relation": "owner",
	    "object": "document:2021-budget"
	  }
	}
	```
	Auth0 FGA's response will include `{ "allowed": true }` if there is a relationship and `{ "allowed": false }` if there isn't.
		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiCheckRequest
	*/
	Check(ctx _context.Context) ApiCheckRequest

	/*
	 * CheckExecute executes the request
	 * @return CheckResponse
	 */
	CheckExecute(r ApiCheckRequest) (CheckResponse, *_nethttp.Response, error)

	/*
		 * DeleteTokenIssuer Remove 3rd party token issuer for Auth0 FGA read and write operations
		 * The DELETE token-issuers API will remove the specified 3rd party token issuer as a token issuer that is allowed by Auth0 FGA. The specified id is the id associated with the issuer url that is to be removed.
	## Example
	To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @param id Id of token issuer to be removed
		 * @return ApiDeleteTokenIssuerRequest
	*/
	DeleteTokenIssuer(ctx _context.Context, id string) ApiDeleteTokenIssuerRequest

	/*
	 * DeleteTokenIssuerExecute executes the request
	 */
	DeleteTokenIssuerExecute(r ApiDeleteTokenIssuerRequest) (*_nethttp.Response, error)

	/*
		 * Expand Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
		 * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store.
	This is different from the `/stores/{store_id}/read` API in that both users and computed references are returned.
	Path parameter `store_id` as well as body parameter `object`, `relation` are all required.
	The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.

	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- Each store has a limit of **30** expand requests per minute (RPM).
	## Example
	Assume the following type definition for document:
	```yaml
	  type document
	    relations
	      define reader as self or writer
	      define writer as self
	```
	In order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body
	```json
	{
	  "tuple_key": {
	    "object": "document:2021-budget",
	    "relation": "reader"
	  }
	}
	```
	Auth0 FGA's response will be a userset tree of the users and computed usersets that have read access to the document.
	```json
	{
	  "tree":{
	    "root":{
	      "type":"document:2021-budget#reader",
	      "union":{
	        "nodes":[
	          {
	            "type":"document:2021-budget#reader",
	            "leaf":{
	              "users":{
	                "users":[
	                  "bob@auth0.com"
	                ]
	              }
	            }
	          },
	          {
	            "type":"document:2021-budget#reader",
	            "leaf":{
	              "computed":{
	                "userset":"document:2021-budget#writer"
	              }
	            }
	          }
	        ]
	      }
	    }
	  }
	}
	```
	The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiExpandRequest
	*/
	Expand(ctx _context.Context) ApiExpandRequest

	/*
	 * ExpandExecute executes the request
	 * @return ExpandResponse
	 */
	ExpandExecute(r ApiExpandRequest) (ExpandResponse, *_nethttp.Response, error)

	/*
		 * Read Get tuples from the store that matches a query, without following userset rewrite rules
		 * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user.
	It is different from the `/stores/{store_id}/expand` API in that only read returns relationship tuples that are stored in the system and satisfy the query.
	It does not expand or traverse the graph by taking the authorization model into account.Path parameter `store_id` is required.  In the body:
	1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`).
	2. User is mandatory in the case the object is type only.
	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- Each store has a limit of **25** read requests per second (RPS).
	## Examples
	### Query for all objects in a type definition
	To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of
	```json
	{
	 "tuple_key": {
	     "user": "bob@auth0.com",
	     "relation": "reader",
	     "object": "document:"
	  }
	}
	```
	The API will return tuples and an optional continuation token, something like
	```json
	{
	  "tuples": [
	    {
	      "key": {
	        "user": "bob@auth0.com",
	        "relation": "reader",
	        "object": "document:2021-budget"
	      },
	      "timestamp": "2021-10-06T15:32:11.128Z"
	    }
	  ]
	}
	```
	This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`.
	### Query for all users with particular relationships for a particular document
	To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of
	```json
	{
	  "tuple_key": {
	     "object": "document:2021-budget",
	     "relation": "reader"
	   }
	}
	```
	The API will return something like
	```json
	{
	  "tuples": [
	    {
	      "key": {
	        "user": "bob@auth0.com",
	        "relation": "reader",
	        "object": "document:2021-budget"
	      },
	      "timestamp": "2021-10-06T15:32:11.128Z"
	    }
	  ]
	}
	```
	This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API.
	### Query for all users with all relationships for a particular document
	To query for all users that have any relationship with `document:2021-budget`, call read API with body of
	```json
	{
	  "tuple_key": {
	      "object": "document:2021-budget"
	   }
	}
	```
	The API will return something like
	```json
	{
	  "tuples": [
	    {
	      "key": {
	        "user": "anne@auth0.com",
	        "relation": "writer",
	        "object": "document:2021-budget"
	      },
	      "timestamp": "2021-10-05T13:42:12.356Z"
	    },
	    {
	      "key": {
	        "user": "bob@auth0.com",
	        "relation": "reader",
	        "object": "document:2021-budget"
	      },
	      "timestamp": "2021-10-06T15:32:11.128Z"
	    }
	  ]
	}
	```
	This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`).

		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiReadRequest
	*/
	Read(ctx _context.Context) ApiReadRequest

	/*
	 * ReadExecute executes the request
	 * @return ReadResponse
	 */
	ReadExecute(r ApiReadRequest) (ReadResponse, *_nethttp.Response, error)

	/*
	 * ReadAssertions Read assertions for an authorization model ID
	 * The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param authorizationModelId
	 * @return ApiReadAssertionsRequest
	 */
	ReadAssertions(ctx _context.Context, authorizationModelId string) ApiReadAssertionsRequest

	/*
	 * ReadAssertionsExecute executes the request
	 * @return ReadAssertionsResponse
	 */
	ReadAssertionsExecute(r ApiReadAssertionsRequest) (ReadAssertionsResponse, *_nethttp.Response, error)

	/*
		 * ReadAuthorizationModel Return a particular version of an authorization model
		 * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.
	Path parameter `store_id` and `id` are required.
	The response will return the authorization model for the particular version.

	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- Each store has a limit of **30** read authorization-models requests per minute (RPM).
	## Example
	To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return:
	```json
	{
	  "authorization_model":{
	    "id":"1yunpF9DkzXMzm0dHrsCuWsooEV",
	    "type_definitions":[
	      {
	        "type":"document",
	        "relations":{
	          "reader":{
	            "union":{
	              "child":[
	                {
	                  "this":{}
	                },
	                {
	                  "computedUserset":{
	                    "object":"",
	                    "relation":"writer"
	                  }
	                }
	              ]
	            }
	          },
	          "writer":{
	            "this":{}
	          }
	        }
	      }
	    ]
	  }
	}
	```
	In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @param id
		 * @return ApiReadAuthorizationModelRequest
	*/
	ReadAuthorizationModel(ctx _context.Context, id string) ApiReadAuthorizationModelRequest

	/*
	 * ReadAuthorizationModelExecute executes the request
	 * @return ReadAuthorizationModelResponse
	 */
	ReadAuthorizationModelExecute(r ApiReadAuthorizationModelRequest) (ReadAuthorizationModelResponse, *_nethttp.Response, error)

	/*
		 * ReadAuthorizationModels Return all the authorization model IDs for a particular store
		 * The GET authorization-models API will return all the IDs of the authorization models for a certain store.
	Path parameter `store_id` is required.
	Auth0 FGA's response will contain an array of all authorization model IDs, sorted in descending order of creation.

	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- Each store has a limit of **30** read authorization-models requests per minute (RPM).
	- Each response can contain up to **50** authorization model IDs.
	## Example
	Assume that the store's authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like:
	```json
	{
	  "authorization_model_ids": [
	      "1yunpF9DkzXMzm0dHrsCuWsooEV",
	      "1yundoHpJHlodgn4EOVar2DhmKp"
	  ]
	}
	```
	If there are more authorization model IDs available, the response will contain an extra field `continuation_token`:
	```json
	{
	  "authorization_model_ids": [
	      "1yunpF9DkzXMzm0dHrsCuWsooEV",
	      "1yundoHpJHlodgn4EOVar2DhmKp"
	  ],
	  "continuation_token": "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="
	}
	```

		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiReadAuthorizationModelsRequest
	*/
	ReadAuthorizationModels(ctx _context.Context) ApiReadAuthorizationModelsRequest

	/*
	 * ReadAuthorizationModelsExecute executes the request
	 * @return ReadAuthorizationModelsResponse
	 */
	ReadAuthorizationModelsExecute(r ApiReadAuthorizationModelsRequest) (ReadAuthorizationModelsResponse, *_nethttp.Response, error)

	/*
		 * ReadChanges Return a list of all the tuple changes
		 * The GET changes API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty.
	You can use the `type` parameter to only get the list of tuple changes that affect objects of that type.
	Each store has a limit of **5** requests per second (RPS).
		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiReadChangesRequest
	*/
	ReadChanges(ctx _context.Context) ApiReadChangesRequest

	/*
	 * ReadChangesExecute executes the request
	 * @return ReadChangesResponse
	 */
	ReadChangesExecute(r ApiReadChangesRequest) (ReadChangesResponse, *_nethttp.Response, error)

	/*
		 * ReadSettings Return store settings, including the environment tag
		 * The GET settings API will return the store's settings, including environment tag and an array of Auth0 FGA's allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.
	Path parameter `store_id` is required.
	## Example
	GET settings API's response looks like:
	```json
	{
	  "environment":"STAGING",
	  "token_issuers":[
	    {
	      "id":"0ujsszwN8NRY24YaXiTIE2VWDTS",
	      "issuer_url":"https://example.issuer.com"
	    }
	  ]
	}
	```
	In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiReadSettingsRequest
	*/
	ReadSettings(ctx _context.Context) ApiReadSettingsRequest

	/*
	 * ReadSettingsExecute executes the request
	 * @return ReadSettingsResponse
	 */
	ReadSettingsExecute(r ApiReadSettingsRequest) (ReadSettingsResponse, *_nethttp.Response, error)

	/*
		 * Write Add or delete tuples from the store
		 * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user.
	Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.
	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- Each write API call allows at most **10** tuples.
	- Each store has a limit of **50000** tuples.
	- Each store has a limit of **20** write requests per second (RPS).
	## Example
	### Adding relationships
	To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following
	```json
	{
	  "writes": {
	    "tuple_keys": [
	      {
	        "user": "anne@auth0.com",
	        "relation": "writer",
	        "object": "document:2021-budget"
	      }
	    ]
	  }
	}
	```
	### Removing relationships
	To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following
	```json
	{
	  "deletes": {
	    "tuple_keys": [
	      {
	        "user": "bob@auth0.com",
	        "relation": "reader",
	        "object": "document:2021-budget"
	      }
	    ]
	  }
	}
	```

		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiWriteRequest
	*/
	Write(ctx _context.Context) ApiWriteRequest

	/*
	 * WriteExecute executes the request
	 * @return map[string]interface{}
	 */
	WriteExecute(r ApiWriteRequest) (map[string]interface{}, *_nethttp.Response, error)

	/*
	 * WriteAssertions Upsert assertions for an authorization model ID
	 * The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param authorizationModelId
	 * @return ApiWriteAssertionsRequest
	 */
	WriteAssertions(ctx _context.Context, authorizationModelId string) ApiWriteAssertionsRequest

	/*
	 * WriteAssertionsExecute executes the request
	 */
	WriteAssertionsExecute(r ApiWriteAssertionsRequest) (*_nethttp.Response, error)

	/*
		 * WriteAuthorizationModel Create a new authorization model
		 * The POST authorization-model API will update the authorization model for a certain store.
	Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`.
	The response will return the authorization model's ID in the `id` field.

	## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
	- There can be at most **24** items in the type_definitions array.
	- Each store has a limit of **10** POST authorization-models requests per minute (RPM).
	## Example
	To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:
	```json
	{
	  "type_definitions":[
	    {
	      "type":"document",
	      "relations":{
	        "reader":{
	          "union":{
	            "child":[
	              {
	                "this":{

	                }
	              },
	              {
	                "computedUserset":{
	                  "object":"",
	                  "relation":"writer"
	                }
	              }
	            ]
	          }
	        },
	        "writer":{
	          "this":{

	          }
	        }
	      }
	    }
	  ]
	}
	```
	Auth0 FGA's response will include the version id for this authorization model, which will look like
	```
	{"authorization_model_id": "1yunpF9DkzXMzm0dHrsCuWsooEV"}
	```

		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiWriteAuthorizationModelRequest
	*/
	WriteAuthorizationModel(ctx _context.Context) ApiWriteAuthorizationModelRequest

	/*
	 * WriteAuthorizationModelExecute executes the request
	 * @return WriteAuthorizationModelResponse
	 */
	WriteAuthorizationModelExecute(r ApiWriteAuthorizationModelRequest) (WriteAuthorizationModelResponse, *_nethttp.Response, error)

	/*
		 * WriteSettings Update the environment tag for a store
		 * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments.
	Path parameter `store_id` is required.
	The response will return the updated environment tag as well as other configuration settings.

	## Example
	To update store's environment tag to `STAGING`, call PATCH settings API with the following with the body:
	```json
	{"environment": "STAGING"}
	```

		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiWriteSettingsRequest
	*/
	WriteSettings(ctx _context.Context) ApiWriteSettingsRequest

	/*
	 * WriteSettingsExecute executes the request
	 * @return WriteSettingsResponse
	 */
	WriteSettingsExecute(r ApiWriteSettingsRequest) (WriteSettingsResponse, *_nethttp.Response, error)

	/*
		 * WriteTokenIssuer Add 3rd party token issuer for Auth0 FGA read and write operations
		 * The POST token-issuers API will configure FGA so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA's read and write operations. Otherwise, only tokens issued by Auth0 FGA's issuer (`fga.us.auth0.com`) will be accepted.
	## Example
	To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA's read and write operations:
	1. In the 3rd party issuer, configure Auth0 FGA API with the following audience in its issuer configuration: `https://api.us1.fga.dev`.
	2. Call POST token-issuers API with the body: `{"issuer_url": "https://example.issuer.com"}`

	The response will be the id that is associated with the token issuer:
	```json
	{
	  "id":"0ujsszwN8NRY24YaXiTIE2VWDTS"
	}
	```

		 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 * @return ApiWriteTokenIssuerRequest
	*/
	WriteTokenIssuer(ctx _context.Context) ApiWriteTokenIssuerRequest

	/*
	 * WriteTokenIssuerExecute executes the request
	 * @return WriteTokenIssuersResponse
	 */
	WriteTokenIssuerExecute(r ApiWriteTokenIssuerRequest) (WriteTokenIssuersResponse, *_nethttp.Response, error)
}

// Auth0FgaApiService Auth0FgaApi service
type Auth0FgaApiService service

func getMaximumRateUnit(api string) string {
	switch api {
	case "Check":
		return "second"
	case "Read":
		return "second"
	case "Write":
		return "second"
	default:
		return "minute"
	}
}

func randomTime(loopCount int, minWaitInMs int) int {
	min := int(_math.Pow(2, float64(loopCount))) * minWaitInMs
	max := int(_math.Pow(2, float64(loopCount+1))) * minWaitInMs
	return _rand.Intn(max-min+1) + min
}

type ApiCheckRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	params *CheckRequestParams
}

func (r ApiCheckRequest) Params(params CheckRequestParams) ApiCheckRequest {
	r.params = &params
	return r
}

func (r ApiCheckRequest) Execute() (CheckResponse, *_nethttp.Response, error) {
	return r.ApiService.CheckExecute(r)
}

/*
 * Check Check whether a user is authorized to access an object
 * The check API will return whether the user has a certain relationship with an object in a certain store.
Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required.
The response will return whether the relationship exists in the field `allowed`.

## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- Each store has a limit of **300** check requests per second (RPS).
## Example
In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body
```json
{
  "tuple_key": {
    "user": "anne@auth0.com",
    "relation": "owner",
    "object": "document:2021-budget"
  }
}
```
Auth0 FGA's response will include `{ "allowed": true }` if there is a relationship and `{ "allowed": false }` if there isn't.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCheckRequest
*/
func (a *Auth0FgaApiService) Check(ctx _context.Context) ApiCheckRequest {
	return ApiCheckRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return CheckResponse
 */
func (a *Auth0FgaApiService) CheckExecute(r ApiCheckRequest) (CheckResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPost
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  CheckResponse
		)

		localVarPath := "/stores/{store_id}/check"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return localVarReturnValue, nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Check",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Check validation error for " + localVarHTTPMethod + " Check with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Check",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Check authentication error for " + localVarHTTPMethod + " Check with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Check",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Check validation error for " + localVarHTTPMethod + " Check with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Check",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Check rate limit error for " + localVarHTTPMethod + " Check with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("Check")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Check",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Check internal error for " + localVarHTTPMethod + " Check with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "Check",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "Check error for " + localVarHTTPMethod + " Check with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue CheckResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiDeleteTokenIssuerRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	id string
}

func (r ApiDeleteTokenIssuerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteTokenIssuerExecute(r)
}

/*
 * DeleteTokenIssuer Remove 3rd party token issuer for Auth0 FGA read and write operations
 * The DELETE token-issuers API will remove the specified 3rd party token issuer as a token issuer that is allowed by Auth0 FGA. The specified id is the id associated with the issuer url that is to be removed.
## Example
To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Id of token issuer to be removed
 * @return ApiDeleteTokenIssuerRequest
*/
func (a *Auth0FgaApiService) DeleteTokenIssuer(ctx _context.Context, id string) ApiDeleteTokenIssuerRequest {
	return ApiDeleteTokenIssuerRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *Auth0FgaApiService) DeleteTokenIssuerExecute(r ApiDeleteTokenIssuerRequest) (*_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodDelete
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
		)

		localVarPath := "/stores/{store_id}/settings/token-issuers/{id}"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "DeleteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "DeleteTokenIssuer validation error for " + localVarHTTPMethod + " DeleteTokenIssuer with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "DeleteTokenIssuer",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "DeleteTokenIssuer authentication error for " + localVarHTTPMethod + " DeleteTokenIssuer with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "DeleteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "DeleteTokenIssuer validation error for " + localVarHTTPMethod + " DeleteTokenIssuer with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "DeleteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "DeleteTokenIssuer rate limit error for " + localVarHTTPMethod + " DeleteTokenIssuer with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("DeleteTokenIssuer")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "DeleteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "DeleteTokenIssuer internal error for " + localVarHTTPMethod + " DeleteTokenIssuer with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "DeleteTokenIssuer",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "DeleteTokenIssuer error for " + localVarHTTPMethod + " DeleteTokenIssuer with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarHTTPResponse, newErr
		}

		return localVarHTTPResponse, nil
	}
	// should never have reached this
	return nil, reportError("RateLimitError not handled properly")
}

type ApiExpandRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	params *ExpandRequestParams
}

func (r ApiExpandRequest) Params(params ExpandRequestParams) ApiExpandRequest {
	r.params = &params
	return r
}

func (r ApiExpandRequest) Execute() (ExpandResponse, *_nethttp.Response, error) {
	return r.ApiService.ExpandExecute(r)
}

/*
 * Expand Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
 * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store.
This is different from the `/stores/{store_id}/read` API in that both users and computed references are returned.
Path parameter `store_id` as well as body parameter `object`, `relation` are all required.
The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.

## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- Each store has a limit of **30** expand requests per minute (RPM).
## Example
Assume the following type definition for document:
```yaml
  type document
    relations
      define reader as self or writer
      define writer as self
```
In order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body
```json
{
  "tuple_key": {
    "object": "document:2021-budget",
    "relation": "reader"
  }
}
```
Auth0 FGA's response will be a userset tree of the users and computed usersets that have read access to the document.
```json
{
  "tree":{
    "root":{
      "type":"document:2021-budget#reader",
      "union":{
        "nodes":[
          {
            "type":"document:2021-budget#reader",
            "leaf":{
              "users":{
                "users":[
                  "bob@auth0.com"
                ]
              }
            }
          },
          {
            "type":"document:2021-budget#reader",
            "leaf":{
              "computed":{
                "userset":"document:2021-budget#writer"
              }
            }
          }
        ]
      }
    }
  }
}
```
The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiExpandRequest
*/
func (a *Auth0FgaApiService) Expand(ctx _context.Context) ApiExpandRequest {
	return ApiExpandRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ExpandResponse
 */
func (a *Auth0FgaApiService) ExpandExecute(r ApiExpandRequest) (ExpandResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPost
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ExpandResponse
		)

		localVarPath := "/stores/{store_id}/expand"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return localVarReturnValue, nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Expand",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Expand validation error for " + localVarHTTPMethod + " Expand with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Expand",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Expand authentication error for " + localVarHTTPMethod + " Expand with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Expand",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Expand validation error for " + localVarHTTPMethod + " Expand with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Expand",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Expand rate limit error for " + localVarHTTPMethod + " Expand with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("Expand")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Expand",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Expand internal error for " + localVarHTTPMethod + " Expand with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "Expand",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "Expand error for " + localVarHTTPMethod + " Expand with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ExpandResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiReadRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	params *ReadRequestParams
}

func (r ApiReadRequest) Params(params ReadRequestParams) ApiReadRequest {
	r.params = &params
	return r
}

func (r ApiReadRequest) Execute() (ReadResponse, *_nethttp.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
 * Read Get tuples from the store that matches a query, without following userset rewrite rules
 * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user.
It is different from the `/stores/{store_id}/expand` API in that only read returns relationship tuples that are stored in the system and satisfy the query.
It does not expand or traverse the graph by taking the authorization model into account.Path parameter `store_id` is required.  In the body:
1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`).
2. User is mandatory in the case the object is type only.
## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- Each store has a limit of **25** read requests per second (RPS).
## Examples
### Query for all objects in a type definition
To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of
```json
{
 "tuple_key": {
     "user": "bob@auth0.com",
     "relation": "reader",
     "object": "document:"
  }
}
```
The API will return tuples and an optional continuation token, something like
```json
{
  "tuples": [
    {
      "key": {
        "user": "bob@auth0.com",
        "relation": "reader",
        "object": "document:2021-budget"
      },
      "timestamp": "2021-10-06T15:32:11.128Z"
    }
  ]
}
```
This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`.
### Query for all users with particular relationships for a particular document
To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of
```json
{
  "tuple_key": {
     "object": "document:2021-budget",
     "relation": "reader"
   }
}
```
The API will return something like
```json
{
  "tuples": [
    {
      "key": {
        "user": "bob@auth0.com",
        "relation": "reader",
        "object": "document:2021-budget"
      },
      "timestamp": "2021-10-06T15:32:11.128Z"
    }
  ]
}
```
This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API.
### Query for all users with all relationships for a particular document
To query for all users that have any relationship with `document:2021-budget`, call read API with body of
```json
{
  "tuple_key": {
      "object": "document:2021-budget"
   }
}
```
The API will return something like
```json
{
  "tuples": [
    {
      "key": {
        "user": "anne@auth0.com",
        "relation": "writer",
        "object": "document:2021-budget"
      },
      "timestamp": "2021-10-05T13:42:12.356Z"
    },
    {
      "key": {
        "user": "bob@auth0.com",
        "relation": "reader",
        "object": "document:2021-budget"
      },
      "timestamp": "2021-10-06T15:32:11.128Z"
    }
  ]
}
```
This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`).

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiReadRequest
*/
func (a *Auth0FgaApiService) Read(ctx _context.Context) ApiReadRequest {
	return ApiReadRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ReadResponse
 */
func (a *Auth0FgaApiService) ReadExecute(r ApiReadRequest) (ReadResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPost
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ReadResponse
		)

		localVarPath := "/stores/{store_id}/read"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return localVarReturnValue, nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Read",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Read validation error for " + localVarHTTPMethod + " Read with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Read",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Read authentication error for " + localVarHTTPMethod + " Read with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Read",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Read validation error for " + localVarHTTPMethod + " Read with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Read",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Read rate limit error for " + localVarHTTPMethod + " Read with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("Read")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Read",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Read internal error for " + localVarHTTPMethod + " Read with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "Read",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "Read error for " + localVarHTTPMethod + " Read with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ReadResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiReadAssertionsRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	authorizationModelId string
}

func (r ApiReadAssertionsRequest) Execute() (ReadAssertionsResponse, *_nethttp.Response, error) {
	return r.ApiService.ReadAssertionsExecute(r)
}

/*
 * ReadAssertions Read assertions for an authorization model ID
 * The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param authorizationModelId
 * @return ApiReadAssertionsRequest
 */
func (a *Auth0FgaApiService) ReadAssertions(ctx _context.Context, authorizationModelId string) ApiReadAssertionsRequest {
	return ApiReadAssertionsRequest{
		ApiService:           a,
		ctx:                  ctx,
		authorizationModelId: authorizationModelId,
	}
}

/*
 * Execute executes the request
 * @return ReadAssertionsResponse
 */
func (a *Auth0FgaApiService) ReadAssertionsExecute(r ApiReadAssertionsRequest) (ReadAssertionsResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodGet
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ReadAssertionsResponse
		)

		localVarPath := "/stores/{store_id}/assertions/{authorization_model_id}"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)
		localVarPath = strings.Replace(localVarPath, "{"+"authorization_model_id"+"}", _neturl.PathEscape(parameterToString(r.authorizationModelId, "")), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAssertions validation error for " + localVarHTTPMethod + " ReadAssertions with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAssertions",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAssertions authentication error for " + localVarHTTPMethod + " ReadAssertions with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAssertions validation error for " + localVarHTTPMethod + " ReadAssertions with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadAssertions rate limit error for " + localVarHTTPMethod + " ReadAssertions with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("ReadAssertions")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadAssertions internal error for " + localVarHTTPMethod + " ReadAssertions with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "ReadAssertions",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "ReadAssertions error for " + localVarHTTPMethod + " ReadAssertions with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ReadAssertionsResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiReadAuthorizationModelRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	id string
}

func (r ApiReadAuthorizationModelRequest) Execute() (ReadAuthorizationModelResponse, *_nethttp.Response, error) {
	return r.ApiService.ReadAuthorizationModelExecute(r)
}

/*
 * ReadAuthorizationModel Return a particular version of an authorization model
 * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.
Path parameter `store_id` and `id` are required.
The response will return the authorization model for the particular version.

## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- Each store has a limit of **30** read authorization-models requests per minute (RPM).
## Example
To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return:
```json
{
  "authorization_model":{
    "id":"1yunpF9DkzXMzm0dHrsCuWsooEV",
    "type_definitions":[
      {
        "type":"document",
        "relations":{
          "reader":{
            "union":{
              "child":[
                {
                  "this":{}
                },
                {
                  "computedUserset":{
                    "object":"",
                    "relation":"writer"
                  }
                }
              ]
            }
          },
          "writer":{
            "this":{}
          }
        }
      }
    ]
  }
}
```
In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiReadAuthorizationModelRequest
*/
func (a *Auth0FgaApiService) ReadAuthorizationModel(ctx _context.Context, id string) ApiReadAuthorizationModelRequest {
	return ApiReadAuthorizationModelRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return ReadAuthorizationModelResponse
 */
func (a *Auth0FgaApiService) ReadAuthorizationModelExecute(r ApiReadAuthorizationModelRequest) (ReadAuthorizationModelResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodGet
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ReadAuthorizationModelResponse
		)

		localVarPath := "/stores/{store_id}/authorization-models/{id}"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAuthorizationModel validation error for " + localVarHTTPMethod + " ReadAuthorizationModel with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModel",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAuthorizationModel authentication error for " + localVarHTTPMethod + " ReadAuthorizationModel with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAuthorizationModel validation error for " + localVarHTTPMethod + " ReadAuthorizationModel with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadAuthorizationModel rate limit error for " + localVarHTTPMethod + " ReadAuthorizationModel with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("ReadAuthorizationModel")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadAuthorizationModel internal error for " + localVarHTTPMethod + " ReadAuthorizationModel with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "ReadAuthorizationModel",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "ReadAuthorizationModel error for " + localVarHTTPMethod + " ReadAuthorizationModel with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ReadAuthorizationModelResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiReadAuthorizationModelsRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	pageSize          *int32
	continuationToken *string
}

func (r ApiReadAuthorizationModelsRequest) PageSize(pageSize int32) ApiReadAuthorizationModelsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiReadAuthorizationModelsRequest) ContinuationToken(continuationToken string) ApiReadAuthorizationModelsRequest {
	r.continuationToken = &continuationToken
	return r
}

func (r ApiReadAuthorizationModelsRequest) Execute() (ReadAuthorizationModelsResponse, *_nethttp.Response, error) {
	return r.ApiService.ReadAuthorizationModelsExecute(r)
}

/*
 * ReadAuthorizationModels Return all the authorization model IDs for a particular store
 * The GET authorization-models API will return all the IDs of the authorization models for a certain store.
Path parameter `store_id` is required.
Auth0 FGA's response will contain an array of all authorization model IDs, sorted in descending order of creation.

## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- Each store has a limit of **30** read authorization-models requests per minute (RPM).
- Each response can contain up to **50** authorization model IDs.
## Example
Assume that the store's authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like:
```json
{
  "authorization_model_ids": [
      "1yunpF9DkzXMzm0dHrsCuWsooEV",
      "1yundoHpJHlodgn4EOVar2DhmKp"
  ]
}
```
If there are more authorization model IDs available, the response will contain an extra field `continuation_token`:
```json
{
  "authorization_model_ids": [
      "1yunpF9DkzXMzm0dHrsCuWsooEV",
      "1yundoHpJHlodgn4EOVar2DhmKp"
  ],
  "continuation_token": "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="
}
```

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiReadAuthorizationModelsRequest
*/
func (a *Auth0FgaApiService) ReadAuthorizationModels(ctx _context.Context) ApiReadAuthorizationModelsRequest {
	return ApiReadAuthorizationModelsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ReadAuthorizationModelsResponse
 */
func (a *Auth0FgaApiService) ReadAuthorizationModelsExecute(r ApiReadAuthorizationModelsRequest) (ReadAuthorizationModelsResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodGet
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ReadAuthorizationModelsResponse
		)

		localVarPath := "/stores/{store_id}/authorization-models"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}

		if r.pageSize != nil {
			localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
		}
		if r.continuationToken != nil {
			localVarQueryParams.Add("continuation_token", parameterToString(*r.continuationToken, ""))
		}
		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModels",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAuthorizationModels validation error for " + localVarHTTPMethod + " ReadAuthorizationModels with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModels",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAuthorizationModels authentication error for " + localVarHTTPMethod + " ReadAuthorizationModels with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModels",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadAuthorizationModels validation error for " + localVarHTTPMethod + " ReadAuthorizationModels with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModels",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadAuthorizationModels rate limit error for " + localVarHTTPMethod + " ReadAuthorizationModels with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("ReadAuthorizationModels")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadAuthorizationModels",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadAuthorizationModels internal error for " + localVarHTTPMethod + " ReadAuthorizationModels with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "ReadAuthorizationModels",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "ReadAuthorizationModels error for " + localVarHTTPMethod + " ReadAuthorizationModels with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ReadAuthorizationModelsResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiReadChangesRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	type_             *string
	pageSize          *int32
	continuationToken *string
}

func (r ApiReadChangesRequest) Type_(type_ string) ApiReadChangesRequest {
	r.type_ = &type_
	return r
}
func (r ApiReadChangesRequest) PageSize(pageSize int32) ApiReadChangesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiReadChangesRequest) ContinuationToken(continuationToken string) ApiReadChangesRequest {
	r.continuationToken = &continuationToken
	return r
}

func (r ApiReadChangesRequest) Execute() (ReadChangesResponse, *_nethttp.Response, error) {
	return r.ApiService.ReadChangesExecute(r)
}

/*
 * ReadChanges Return a list of all the tuple changes
 * The GET changes API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty.
You can use the `type` parameter to only get the list of tuple changes that affect objects of that type.
Each store has a limit of **5** requests per second (RPS).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiReadChangesRequest
*/
func (a *Auth0FgaApiService) ReadChanges(ctx _context.Context) ApiReadChangesRequest {
	return ApiReadChangesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ReadChangesResponse
 */
func (a *Auth0FgaApiService) ReadChangesExecute(r ApiReadChangesRequest) (ReadChangesResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodGet
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ReadChangesResponse
		)

		localVarPath := "/stores/{store_id}/changes"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}

		if r.type_ != nil {
			localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
		}
		if r.pageSize != nil {
			localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
		}
		if r.continuationToken != nil {
			localVarQueryParams.Add("continuation_token", parameterToString(*r.continuationToken, ""))
		}
		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadChanges",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadChanges validation error for " + localVarHTTPMethod + " ReadChanges with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadChanges",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadChanges authentication error for " + localVarHTTPMethod + " ReadChanges with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadChanges",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadChanges validation error for " + localVarHTTPMethod + " ReadChanges with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadChanges",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadChanges rate limit error for " + localVarHTTPMethod + " ReadChanges with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("ReadChanges")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadChanges",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadChanges internal error for " + localVarHTTPMethod + " ReadChanges with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "ReadChanges",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "ReadChanges error for " + localVarHTTPMethod + " ReadChanges with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ReadChangesResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiReadSettingsRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi
}

func (r ApiReadSettingsRequest) Execute() (ReadSettingsResponse, *_nethttp.Response, error) {
	return r.ApiService.ReadSettingsExecute(r)
}

/*
 * ReadSettings Return store settings, including the environment tag
 * The GET settings API will return the store's settings, including environment tag and an array of Auth0 FGA's allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.
Path parameter `store_id` is required.
## Example
GET settings API's response looks like:
```json
{
  "environment":"STAGING",
  "token_issuers":[
    {
      "id":"0ujsszwN8NRY24YaXiTIE2VWDTS",
      "issuer_url":"https://example.issuer.com"
    }
  ]
}
```
In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiReadSettingsRequest
*/
func (a *Auth0FgaApiService) ReadSettings(ctx _context.Context) ApiReadSettingsRequest {
	return ApiReadSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ReadSettingsResponse
 */
func (a *Auth0FgaApiService) ReadSettingsExecute(r ApiReadSettingsRequest) (ReadSettingsResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodGet
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  ReadSettingsResponse
		)

		localVarPath := "/stores/{store_id}/settings"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadSettings validation error for " + localVarHTTPMethod + " ReadSettings with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadSettings",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadSettings authentication error for " + localVarHTTPMethod + " ReadSettings with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "ReadSettings validation error for " + localVarHTTPMethod + " ReadSettings with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadSettings rate limit error for " + localVarHTTPMethod + " ReadSettings with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("ReadSettings")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "ReadSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "ReadSettings internal error for " + localVarHTTPMethod + " ReadSettings with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "ReadSettings",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "ReadSettings error for " + localVarHTTPMethod + " ReadSettings with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue ReadSettingsResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiWriteRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	params *WriteRequestParams
}

func (r ApiWriteRequest) Params(params WriteRequestParams) ApiWriteRequest {
	r.params = &params
	return r
}

func (r ApiWriteRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.WriteExecute(r)
}

/*
 * Write Add or delete tuples from the store
 * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user.
Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.
## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- Each write API call allows at most **10** tuples.
- Each store has a limit of **50000** tuples.
- Each store has a limit of **20** write requests per second (RPS).
## Example
### Adding relationships
To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following
```json
{
  "writes": {
    "tuple_keys": [
      {
        "user": "anne@auth0.com",
        "relation": "writer",
        "object": "document:2021-budget"
      }
    ]
  }
}
```
### Removing relationships
To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following
```json
{
  "deletes": {
    "tuple_keys": [
      {
        "user": "bob@auth0.com",
        "relation": "reader",
        "object": "document:2021-budget"
      }
    ]
  }
}
```

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWriteRequest
*/
func (a *Auth0FgaApiService) Write(ctx _context.Context) ApiWriteRequest {
	return ApiWriteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *Auth0FgaApiService) WriteExecute(r ApiWriteRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPost
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  map[string]interface{}
		)

		localVarPath := "/stores/{store_id}/write"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return localVarReturnValue, nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Write",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Write validation error for " + localVarHTTPMethod + " Write with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Write",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Write authentication error for " + localVarHTTPMethod + " Write with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Write",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "Write validation error for " + localVarHTTPMethod + " Write with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Write",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Write rate limit error for " + localVarHTTPMethod + " Write with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("Write")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "Write",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "Write internal error for " + localVarHTTPMethod + " Write with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "Write",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "Write error for " + localVarHTTPMethod + " Write with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue map[string]interface{}
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiWriteAssertionsRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	authorizationModelId string
	params               *WriteAssertionsRequestParams
}

func (r ApiWriteAssertionsRequest) Params(params WriteAssertionsRequestParams) ApiWriteAssertionsRequest {
	r.params = &params
	return r
}

func (r ApiWriteAssertionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WriteAssertionsExecute(r)
}

/*
 * WriteAssertions Upsert assertions for an authorization model ID
 * The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param authorizationModelId
 * @return ApiWriteAssertionsRequest
 */
func (a *Auth0FgaApiService) WriteAssertions(ctx _context.Context, authorizationModelId string) ApiWriteAssertionsRequest {
	return ApiWriteAssertionsRequest{
		ApiService:           a,
		ctx:                  ctx,
		authorizationModelId: authorizationModelId,
	}
}

/*
 * Execute executes the request
 */
func (a *Auth0FgaApiService) WriteAssertionsExecute(r ApiWriteAssertionsRequest) (*_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPut
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
		)

		localVarPath := "/stores/{store_id}/assertions/{authorization_model_id}"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)
		localVarPath = strings.Replace(localVarPath, "{"+"authorization_model_id"+"}", _neturl.PathEscape(parameterToString(r.authorizationModelId, "")), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteAssertions validation error for " + localVarHTTPMethod + " WriteAssertions with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAssertions",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteAssertions authentication error for " + localVarHTTPMethod + " WriteAssertions with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteAssertions validation error for " + localVarHTTPMethod + " WriteAssertions with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteAssertions rate limit error for " + localVarHTTPMethod + " WriteAssertions with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("WriteAssertions")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAssertions",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteAssertions internal error for " + localVarHTTPMethod + " WriteAssertions with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "WriteAssertions",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "WriteAssertions error for " + localVarHTTPMethod + " WriteAssertions with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarHTTPResponse, newErr
		}

		return localVarHTTPResponse, nil
	}
	// should never have reached this
	return nil, reportError("RateLimitError not handled properly")
}

type ApiWriteAuthorizationModelRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	typeDefinitions *TypeDefinitions
}

func (r ApiWriteAuthorizationModelRequest) TypeDefinitions(typeDefinitions TypeDefinitions) ApiWriteAuthorizationModelRequest {
	r.typeDefinitions = &typeDefinitions
	return r
}

func (r ApiWriteAuthorizationModelRequest) Execute() (WriteAuthorizationModelResponse, *_nethttp.Response, error) {
	return r.ApiService.WriteAuthorizationModelExecute(r)
}

/*
 * WriteAuthorizationModel Create a new authorization model
 * The POST authorization-model API will update the authorization model for a certain store.
Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`.
The response will return the authorization model's ID in the `id` field.

## [Limits](https://docs.fga.dev/intro/dashboard#limitations)
- There can be at most **24** items in the type_definitions array.
- Each store has a limit of **10** POST authorization-models requests per minute (RPM).
## Example
To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:
```json
{
  "type_definitions":[
    {
      "type":"document",
      "relations":{
        "reader":{
          "union":{
            "child":[
              {
                "this":{

                }
              },
              {
                "computedUserset":{
                  "object":"",
                  "relation":"writer"
                }
              }
            ]
          }
        },
        "writer":{
          "this":{

          }
        }
      }
    }
  ]
}
```
Auth0 FGA's response will include the version id for this authorization model, which will look like
```
{"authorization_model_id": "1yunpF9DkzXMzm0dHrsCuWsooEV"}
```

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWriteAuthorizationModelRequest
*/
func (a *Auth0FgaApiService) WriteAuthorizationModel(ctx _context.Context) ApiWriteAuthorizationModelRequest {
	return ApiWriteAuthorizationModelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return WriteAuthorizationModelResponse
 */
func (a *Auth0FgaApiService) WriteAuthorizationModelExecute(r ApiWriteAuthorizationModelRequest) (WriteAuthorizationModelResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPost
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  WriteAuthorizationModelResponse
		)

		localVarPath := "/stores/{store_id}/authorization-models"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.typeDefinitions == nil {
			return localVarReturnValue, nil, reportError("typeDefinitions is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.typeDefinitions
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteAuthorizationModel validation error for " + localVarHTTPMethod + " WriteAuthorizationModel with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAuthorizationModel",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteAuthorizationModel authentication error for " + localVarHTTPMethod + " WriteAuthorizationModel with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteAuthorizationModel validation error for " + localVarHTTPMethod + " WriteAuthorizationModel with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteAuthorizationModel rate limit error for " + localVarHTTPMethod + " WriteAuthorizationModel with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("WriteAuthorizationModel")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteAuthorizationModel",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteAuthorizationModel internal error for " + localVarHTTPMethod + " WriteAuthorizationModel with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "WriteAuthorizationModel",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "WriteAuthorizationModel error for " + localVarHTTPMethod + " WriteAuthorizationModel with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue WriteAuthorizationModelResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiWriteSettingsRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	params *WriteSettingsRequestParams
}

func (r ApiWriteSettingsRequest) Params(params WriteSettingsRequestParams) ApiWriteSettingsRequest {
	r.params = &params
	return r
}

func (r ApiWriteSettingsRequest) Execute() (WriteSettingsResponse, *_nethttp.Response, error) {
	return r.ApiService.WriteSettingsExecute(r)
}

/*
 * WriteSettings Update the environment tag for a store
 * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments.
Path parameter `store_id` is required.
The response will return the updated environment tag as well as other configuration settings.

## Example
To update store's environment tag to `STAGING`, call PATCH settings API with the following with the body:
```json
{"environment": "STAGING"}
```

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWriteSettingsRequest
*/
func (a *Auth0FgaApiService) WriteSettings(ctx _context.Context) ApiWriteSettingsRequest {
	return ApiWriteSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return WriteSettingsResponse
 */
func (a *Auth0FgaApiService) WriteSettingsExecute(r ApiWriteSettingsRequest) (WriteSettingsResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPatch
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  WriteSettingsResponse
		)

		localVarPath := "/stores/{store_id}/settings"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return localVarReturnValue, nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteSettings validation error for " + localVarHTTPMethod + " WriteSettings with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteSettings",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteSettings authentication error for " + localVarHTTPMethod + " WriteSettings with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteSettings validation error for " + localVarHTTPMethod + " WriteSettings with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteSettings rate limit error for " + localVarHTTPMethod + " WriteSettings with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("WriteSettings")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteSettings",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteSettings internal error for " + localVarHTTPMethod + " WriteSettings with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "WriteSettings",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "WriteSettings error for " + localVarHTTPMethod + " WriteSettings with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue WriteSettingsResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}

type ApiWriteTokenIssuerRequest struct {
	ctx        _context.Context
	ApiService Auth0FgaApi

	params *WriteTokenIssuersRequestParams
}

func (r ApiWriteTokenIssuerRequest) Params(params WriteTokenIssuersRequestParams) ApiWriteTokenIssuerRequest {
	r.params = &params
	return r
}

func (r ApiWriteTokenIssuerRequest) Execute() (WriteTokenIssuersResponse, *_nethttp.Response, error) {
	return r.ApiService.WriteTokenIssuerExecute(r)
}

/*
 * WriteTokenIssuer Add 3rd party token issuer for Auth0 FGA read and write operations
 * The POST token-issuers API will configure FGA so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA's read and write operations. Otherwise, only tokens issued by Auth0 FGA's issuer (`fga.us.auth0.com`) will be accepted.
## Example
To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA's read and write operations:
1. In the 3rd party issuer, configure Auth0 FGA API with the following audience in its issuer configuration: `https://api.us1.fga.dev`.
2. Call POST token-issuers API with the body: `{"issuer_url": "https://example.issuer.com"}`

The response will be the id that is associated with the token issuer:
```json
{
  "id":"0ujsszwN8NRY24YaXiTIE2VWDTS"
}
```

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWriteTokenIssuerRequest
*/
func (a *Auth0FgaApiService) WriteTokenIssuer(ctx _context.Context) ApiWriteTokenIssuerRequest {
	return ApiWriteTokenIssuerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return WriteTokenIssuersResponse
 */
func (a *Auth0FgaApiService) WriteTokenIssuerExecute(r ApiWriteTokenIssuerRequest) (WriteTokenIssuersResponse, *_nethttp.Response, error) {
	var maxRetry int
	var minWaitInMs int

	if a.RetryParams != nil {
		maxRetry = a.RetryParams.MinWaitInMs
		minWaitInMs = a.RetryParams.MinWaitInMs
	} else {
		maxRetry = 0
		minWaitInMs = 0
	}

	for i := 0; i < maxRetry+1; i++ {
		var (
			localVarHTTPMethod   = _nethttp.MethodPost
			localVarPostBody     interface{}
			localVarFormFileName string
			localVarFileName     string
			localVarFileBytes    []byte
			localVarReturnValue  WriteTokenIssuersResponse
		)

		localVarPath := "/stores/{store_id}/settings/token-issuers"
		localVarPath = strings.Replace(localVarPath, "{"+"store_id"+"}", _neturl.PathEscape(a.client.cfg.StoreId), -1)

		localVarHeaderParams := make(map[string]string)
		localVarQueryParams := _neturl.Values{}
		localVarFormParams := _neturl.Values{}
		if r.params == nil {
			return localVarReturnValue, nil, reportError("params is required and must be specified")
		}

		// to determine the Content-Type header
		localVarHTTPContentTypes := []string{"application/json"}

		// set Content-Type header
		localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
		if localVarHTTPContentType != "" {
			localVarHeaderParams["Content-Type"] = localVarHTTPContentType
		}

		// to determine the Accept header
		localVarHTTPHeaderAccepts := []string{"application/json"}

		// set Accept header
		localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
		if localVarHTTPHeaderAccept != "" {
			localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
		}
		// body params
		localVarPostBody = r.params
		req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
		if err != nil {
			return localVarReturnValue, nil, err
		}

		localVarHTTPResponse, err := a.client.callAPI(req)
		if err != nil || localVarHTTPResponse == nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
		localVarHTTPResponse.Body.Close()
		localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}

		if localVarHTTPResponse.StatusCode >= 300 {

			if localVarHTTPResponse.StatusCode == 400 || localVarHTTPResponse.StatusCode == 422 {
				newErr := Auth0FgaApiValidationError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteTokenIssuer validation error for " + localVarHTTPMethod + " WriteTokenIssuer with body " + string(localVarBody)
				var v ValidationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 401 || localVarHTTPResponse.StatusCode == 403 {
				newErr := Auth0FgaApiAuthenticationError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteTokenIssuer",
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteTokenIssuer authentication error for " + localVarHTTPMethod + " WriteTokenIssuer with body " + string(localVarBody)

				var v AuthenticationErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 404 {
				newErr := Auth0FgaApiNotFoundError{
					body:               localVarBody,
					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.error = "WriteTokenIssuer validation error for " + localVarHTTPMethod + " WriteTokenIssuer with body " + string(localVarBody)
				var v PathUnknownErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode == 429 {
				if i < maxRetry {
					time.Sleep(time.Duration(randomTime(i, minWaitInMs)) * time.Millisecond)
					continue
				}
				// maximum number of retry reached
				newErr := Auth0FgaApiRateLimitError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteTokenIssuer rate limit error for " + localVarHTTPMethod + " WriteTokenIssuer with body " + string(localVarBody)

				// Due to CanonicalHeaderKey, header name is case-insensitive.
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")
				newErr.rateLimit, _ = atoi(localVarHTTPResponse.Header.Get("X-Ratelimit-Limit"))
				newErr.rateUnit = getMaximumRateUnit("WriteTokenIssuer")
				newErr.rateLimitResetEpoch = localVarHTTPResponse.Header.Get("X-Ratelimit-Reset")
				var v ResourceExhaustedErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}

			if localVarHTTPResponse.StatusCode >= 500 {
				newErr := Auth0FgaApiInternalError{
					body: localVarBody,

					storeId:            a.client.cfg.StoreId,
					endpointCategory:   "WriteTokenIssuer",
					requestBody:        localVarPostBody,
					requestMethod:      localVarHTTPMethod,
					responseStatusCode: localVarHTTPResponse.StatusCode,
					responseHeader:     localVarHTTPResponse.Header,
				}
				newErr.error = "WriteTokenIssuer internal error for " + localVarHTTPMethod + " WriteTokenIssuer with body " + string(localVarBody)
				newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

				var v InternalErrorMessageResponse
				err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
				if err != nil {
					newErr.modelDecodeError = err
					return localVarReturnValue, localVarHTTPResponse, newErr
				}
				newErr.model = v
				newErr.responseCode = v.GetCode()
				newErr.error += " with error code " + string(v.GetCode()) + " error message: " + v.GetMessage()

				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr := Auth0FgaApiError{
				body: localVarBody,

				storeId:            a.client.cfg.StoreId,
				endpointCategory:   "WriteTokenIssuer",
				requestBody:        localVarPostBody,
				requestMethod:      localVarHTTPMethod,
				responseStatusCode: localVarHTTPResponse.StatusCode,
				responseHeader:     localVarHTTPResponse.Header,
			}
			newErr.error = "WriteTokenIssuer error for " + localVarHTTPMethod + " WriteTokenIssuer with body " + string(localVarBody)
			newErr.requestId = localVarHTTPResponse.Header.Get("Fga-Request-Id")

			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.modelDecodeError = err
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			newErr.responseCode = v.Code
			newErr.error += " with error code " + v.Code + " error message: " + v.Message

			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: err.Error(),
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}

		return localVarReturnValue, localVarHTTPResponse, nil
	}
	// should never have reached this
	var localVarReturnValue WriteTokenIssuersResponse
	return localVarReturnValue, nil, reportError("RateLimitError not handled properly")
}
