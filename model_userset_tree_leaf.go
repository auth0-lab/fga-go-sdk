/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// UsersetTreeLeaf A leaf node contains either  - a set of users (which may be individual users, or usersets   referencing other relations - a computed node, which is the result of a computed userset   value in the authorization model - a tupleToUserset nodes, containing the result of expanding   a tupleToUserset value in a authorization model.
type UsersetTreeLeaf struct {
	Users          *UsersetTreeUsers                  `json:"users,omitempty"`
	Computed       *UsersetTreeComputed               `json:"computed,omitempty"`
	TupleToUserset *Auth0FgaUsersetTreeTupleToUserset `json:"tupleToUserset,omitempty"`
}

// NewUsersetTreeLeaf instantiates a new UsersetTreeLeaf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersetTreeLeaf() *UsersetTreeLeaf {
	this := UsersetTreeLeaf{}
	return &this
}

// NewUsersetTreeLeafWithDefaults instantiates a new UsersetTreeLeaf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersetTreeLeafWithDefaults() *UsersetTreeLeaf {
	this := UsersetTreeLeaf{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UsersetTreeLeaf) GetUsers() UsersetTreeUsers {
	if o == nil || o.Users == nil {
		var ret UsersetTreeUsers
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeLeaf) GetUsersOk() (*UsersetTreeUsers, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UsersetTreeLeaf) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given UsersetTreeUsers and assigns it to the Users field.
func (o *UsersetTreeLeaf) SetUsers(v UsersetTreeUsers) {
	o.Users = &v
}

// GetComputed returns the Computed field value if set, zero value otherwise.
func (o *UsersetTreeLeaf) GetComputed() UsersetTreeComputed {
	if o == nil || o.Computed == nil {
		var ret UsersetTreeComputed
		return ret
	}
	return *o.Computed
}

// GetComputedOk returns a tuple with the Computed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeLeaf) GetComputedOk() (*UsersetTreeComputed, bool) {
	if o == nil || o.Computed == nil {
		return nil, false
	}
	return o.Computed, true
}

// HasComputed returns a boolean if a field has been set.
func (o *UsersetTreeLeaf) HasComputed() bool {
	if o != nil && o.Computed != nil {
		return true
	}

	return false
}

// SetComputed gets a reference to the given UsersetTreeComputed and assigns it to the Computed field.
func (o *UsersetTreeLeaf) SetComputed(v UsersetTreeComputed) {
	o.Computed = &v
}

// GetTupleToUserset returns the TupleToUserset field value if set, zero value otherwise.
func (o *UsersetTreeLeaf) GetTupleToUserset() Auth0FgaUsersetTreeTupleToUserset {
	if o == nil || o.TupleToUserset == nil {
		var ret Auth0FgaUsersetTreeTupleToUserset
		return ret
	}
	return *o.TupleToUserset
}

// GetTupleToUsersetOk returns a tuple with the TupleToUserset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersetTreeLeaf) GetTupleToUsersetOk() (*Auth0FgaUsersetTreeTupleToUserset, bool) {
	if o == nil || o.TupleToUserset == nil {
		return nil, false
	}
	return o.TupleToUserset, true
}

// HasTupleToUserset returns a boolean if a field has been set.
func (o *UsersetTreeLeaf) HasTupleToUserset() bool {
	if o != nil && o.TupleToUserset != nil {
		return true
	}

	return false
}

// SetTupleToUserset gets a reference to the given Auth0FgaUsersetTreeTupleToUserset and assigns it to the TupleToUserset field.
func (o *UsersetTreeLeaf) SetTupleToUserset(v Auth0FgaUsersetTreeTupleToUserset) {
	o.TupleToUserset = &v
}

func (o UsersetTreeLeaf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.Computed != nil {
		toSerialize["computed"] = o.Computed
	}
	if o.TupleToUserset != nil {
		toSerialize["tupleToUserset"] = o.TupleToUserset
	}
	return json.Marshal(toSerialize)
}

type NullableUsersetTreeLeaf struct {
	value *UsersetTreeLeaf
	isSet bool
}

func (v NullableUsersetTreeLeaf) Get() *UsersetTreeLeaf {
	return v.value
}

func (v *NullableUsersetTreeLeaf) Set(val *UsersetTreeLeaf) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersetTreeLeaf) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersetTreeLeaf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersetTreeLeaf(val *UsersetTreeLeaf) *NullableUsersetTreeLeaf {
	return &NullableUsersetTreeLeaf{value: val, isSet: true}
}

func (v NullableUsersetTreeLeaf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersetTreeLeaf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
