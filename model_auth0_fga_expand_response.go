/*
 * Auth0 Fine Grained Authorization (FGA)
 *
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * API version: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth0fga

import (
	"encoding/json"
)

// Auth0FgaExpandResponse struct for Auth0FgaExpandResponse
type Auth0FgaExpandResponse struct {
	Tree *Auth0FgaUsersetTree `json:"tree,omitempty"`
}

// NewAuth0FgaExpandResponse instantiates a new Auth0FgaExpandResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth0FgaExpandResponse() *Auth0FgaExpandResponse {
	this := Auth0FgaExpandResponse{}
	return &this
}

// NewAuth0FgaExpandResponseWithDefaults instantiates a new Auth0FgaExpandResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuth0FgaExpandResponseWithDefaults() *Auth0FgaExpandResponse {
	this := Auth0FgaExpandResponse{}
	return &this
}

// GetTree returns the Tree field value if set, zero value otherwise.
func (o *Auth0FgaExpandResponse) GetTree() Auth0FgaUsersetTree {
	if o == nil || o.Tree == nil {
		var ret Auth0FgaUsersetTree
		return ret
	}
	return *o.Tree
}

// GetTreeOk returns a tuple with the Tree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth0FgaExpandResponse) GetTreeOk() (*Auth0FgaUsersetTree, bool) {
	if o == nil || o.Tree == nil {
		return nil, false
	}
	return o.Tree, true
}

// HasTree returns a boolean if a field has been set.
func (o *Auth0FgaExpandResponse) HasTree() bool {
	if o != nil && o.Tree != nil {
		return true
	}

	return false
}

// SetTree gets a reference to the given Auth0FgaUsersetTree and assigns it to the Tree field.
func (o *Auth0FgaExpandResponse) SetTree(v Auth0FgaUsersetTree) {
	o.Tree = &v
}

func (o Auth0FgaExpandResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tree != nil {
		toSerialize["tree"] = o.Tree
	}
	return json.Marshal(toSerialize)
}

type NullableAuth0FgaExpandResponse struct {
	value *Auth0FgaExpandResponse
	isSet bool
}

func (v NullableAuth0FgaExpandResponse) Get() *Auth0FgaExpandResponse {
	return v.value
}

func (v *NullableAuth0FgaExpandResponse) Set(val *Auth0FgaExpandResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth0FgaExpandResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth0FgaExpandResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth0FgaExpandResponse(val *Auth0FgaExpandResponse) *NullableAuth0FgaExpandResponse {
	return &NullableAuth0FgaExpandResponse{value: val, isSet: true}
}

func (v NullableAuth0FgaExpandResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth0FgaExpandResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
